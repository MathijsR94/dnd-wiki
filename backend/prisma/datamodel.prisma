type User @model {
    id: ID! @unique @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    email: String! @unique
    password: String!
    role: ROLE! @default(value: PLAYER)
    campaigns: [Campaign] @relation(link: TABLE)
    firstName: String
    lastName: String
    characters: [Character] @relation(link: TABLE)
    resetToken: String
    resetTokenExpiry: String
}

type Campaign {
    id: ID! @unique @id
    name: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    locations: [Location] @relation(link: TABLE)
    players: [Character] @relation(link: TABLE)
    dm: User!
}

type HTMLContent {
    id: ID! @unique @id
    content: String!
    invisibleTo: [Character]
}

type Character {
    id: ID! @unique @id
    firstName: String!
    lastName: String
    type: CHARACTER_TYPE!
    metadata: CharacterMetadata
    campaign: Campaign!
    user: User
    quests: [Quest]
}

type CharacterMetadata {
    id: ID! @unique @id
    character: Character! @relation(link: INLINE)
    function: CharacterFunction
    gender: GENDER
    race: RACE
    age: Int
    class: CLASS
    location: Location
    status: CHARACTER_STATUS
    allies: ALLY
    religion: Religion
    relatives: [Character]
    groups: [Group]
    enemies: [Group/Character/Location/Religion]
    allies: [Group/Character/Location/Religion]
    quests: [Quest]
    alignment: ALIGNMENT
    personality: Personality
    interaction: CharacterInteraction
    abilities: [Ability]
    skills: [Skill]
    build: CharacterBuild
    roleplay: CharacterRolePlay
}

type CharacterRolePlay {
    voicing: String
}

type CharacterInteraction {
    metByParty: boolean
    firstMet: DateTime
}

type Personality {

}

type Quest {
    name: String!
    executor: [Character!]
    givenBy: Character
    description: String
}

type Group {
    name: String!
    type: GROUP_TYPE!
    characters: [Character!]
}

type CharacterFunction {
    type:
}

type CharacterBuild {
    size: CHARACTER_BUILD_SIZE
    height: Int
    weight: Int
}

type Ability {
    id: ID! @unique @id
    type: ABILITY_TYPE!
    value: Int!
    modifier: Int!
    character: Character!
}

type Skill {
    id: ID! @unique @id
    name: SKILL!
    value: Int!
    character: Character!
}

type Location {
    id: ID! @unique @id
    type: LOCATION_TYPE!
    typology: LocationTypology
    name: String!
    locations: [Location]
    metadata: LocationMetaData
    campaign: Campaign!
}

type LocationTypology {
    id: ID! @unique @id
    type: Barony etc
}

type LocationMetaData {
    id: ID! @unique @id
    location: Location! @relation(link: INLINE)
    population: Population
    languages: [Language]
    religions: [Religion]
    races: [RACE]
    mark: [Flag/Sigil/Sign/Logo]
    economy: Economy
    government: Government
    weather: WEATHER
    climate: CLIMATE
    quests: [Quest]
    enemies: [Group/Character/Location/Religion]
    allies: [Group/Character/Location/Religion]
}

type God {
    name: String!
    title: [String!]
    alignment: ALIGNMENT
    domain: GodDomain
    description: String
    location: [Location!]
    worshippedBy: [Group/Religion/Location/Race/Class]
    placesOfWorship: [Location!]
}

type HistoricalEvent {
    start: EventDate!
    end: EventDate!
    duration: Int
    location: [Location!]
}

type Era {
    name: String!
    start: EventDate!
    end: EventDate
}

type EventDate {
    day: Int!
    month: Int!
    year: Int!
}

type LoreCategory {

}



type Calendar {
    daysPerWeek: Int!
    weeksPerMonth: Int!
    monthsPerYear: Int!
}

type GodDomain {
    type: DOMAIN_TYPE
    name: String!
}

enum DOMAIN_TYPE {
    Custom
}


type Government {
    id: ID! @unique @id
    leader: Character
    type: GOVERNMENT_TYPE
    freeform
    content: [HTMLContent]
}

type GovernmentParty {
    id: ID! @unique @id
    leader: Character
    name: String!
    content: [HTMLContent]
    government: Government
}

type Economy {
    id: ID! @unique @id
    currency: Currency
    location: [Location] @relation(link: TABLE)
    inkomsten
    bedrijven
        - shops
            - tailor
            - smith
        - magic shops
}

type Currency {
    id: ID! @unique @id
    name: String!
    sign: String
}

type Flag {
    id: ID! @unique @id
    imageSrc: String
    description: String!
    location: Location @relation(link: TABLE)
}

type Etnicity {
    id: ID! @unique @id
    name: String!
}

type Religion {
    id: ID! @unique @id
    name: String!
    worships: Character
    content: [HTMLContent]
    location: Location @relation(link: TABLE)
}

type Population {
    id: ID! @unique @id
    location: Location! @relation(link: TABLE)
    inhabitants: Int!
    density: Int!
    densityUnit: DENSITY_UNIT!
}

type Language {
    id: ID! @unique @id
    name: String!
    script: LANGUAGE_SCRIPT
    location: [Location]
}

enum CLIMATE {
    Tropical
    Dry
    Mild
    Continental
    Polar
}

enum WEATHER {
    Wind
    Sun
    Cloudy
    Snow
}

enum ALIGNMENT {
    LG
    NG
    CG
    LN
    TN
    CN
    LE
    NE
    CE
}

enum DENSITY_UNIT {
    SqKm
    Custom
}

enum LANGUAGE_SCRIPT {
    Common
    Dwarvish
    Elvish
    Infernal
    Celestial
    Draconic
    None
}

enum SKILL {
    Acrobatics
    AnimalHandling
    Arcana
    Athletics
    Deception
    History
    Insight
    Intimidation
    Investigation
    Medicine
    Nature
    Perception
    Performance
    Persuasion
    Religion
    SleightOfHand
    Stealth
    Survival
}

enum ABILITY_TYPE {
    STR
    DEX
    CON
    INT
    WIS
    CHA
}

enum ROLE {
    PLAYER
    ADMIN
}

enum CHARACTER_STATUS {
    ALIVE
    DEAD
}

enum CHARACTER_TYPE {
    PC
    NPC
}

enum RACE {
    Dragonborn
    Dwarf
    Elf
    Gnome
    HalfElf
    HalfOrc
    Halfling
    Human
    Tiefling
}

enum CLASS {
    Barbarian
    Bard
    Cleric
    Druid
    Fighter
    Monk
    Paladin
    Ranger
    Rogue
    Sorcerer
    Warlock
    Wizard
}

enum LOCATION_TYPE {
    Village
    City
    BigCity
    Municipality
    Province
    State
    Country
    Continent
    World
    Universe
    Plane
}

enum GENDER {
    male
    female
    custom
}


enum GROUP_TYPE {
    Cult
    Group
    Organization
    Guild
    Army
    Company
    Clan
    Tribe
    Order
    Federation
    Family
    Syndicate
    Cartel
    Gang
    Council
    Crew
    Club
    Society
    Union
    Church
    Temple
    House
    Custom
}